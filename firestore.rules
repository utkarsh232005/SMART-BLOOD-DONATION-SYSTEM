rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Common functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function hasUserRole(role) {
      return isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role;
    }
    
    function isAdmin() {
      return hasUserRole('admin');
    }
    
    // Users collection
    match /users/{userId} {
      // Users can read their own profile, admins can read all
      allow read: if isOwner(userId) || isAdmin();
      // Users can create their own profile during registration
      allow create: if isAuthenticated() && request.auth.uid == userId;
      // Users can update their own profile, admins can update any
      allow update: if isOwner(userId) || isAdmin();
      // Only admins can delete user profiles
      allow delete: if isAdmin();
    }
    
    // Blood requests
    match /requests/{requestId} {
      // Anyone authenticated can read requests
      allow read: if isAuthenticated();
      // Users can create their own requests
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      // Only the user who created the request or an admin can update it
      allow update: if isAuthenticated() && (
        resource.data.userId == request.auth.uid || 
        isAdmin() ||
        // Allow donors to accept requests
        (resource.data.status == 'pending' && 
         request.resource.data.status == 'accepted' && 
         request.resource.data.donorId == request.auth.uid)
      );
      // Only the user who created the request or an admin can delete it
      allow delete: if isAuthenticated() && (
        resource.data.userId == request.auth.uid || isAdmin()
      );
    }
    
    // Blood donations
    match /donations/{donationId} {
      // Anyone authenticated can read donations
      allow read: if isAuthenticated();
      // Users can create their own donations
      allow create: if isAuthenticated() && request.resource.data.donorId == request.auth.uid;
      // Update rules for donations
      allow update: if isAuthenticated() && (
        // Donor can update their own listing
        resource.data.donorId == request.auth.uid ||
        // Admin can update any donation
        isAdmin() ||
        // Recipient can request a donation
        (resource.data.status == 'available' && 
         request.resource.data.status == 'requested' && 
         request.resource.data.recipientId == request.auth.uid) ||
        // Recipient can cancel their request
        (resource.data.status == 'requested' && 
         resource.data.recipientId == request.auth.uid &&
         request.resource.data.status == 'available')
      );
      // Only the donor or admin can delete a donation
      allow delete: if isAuthenticated() && (
        resource.data.donorId == request.auth.uid || isAdmin()
      );
    }
    
    // Generic catch-all: deny by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
